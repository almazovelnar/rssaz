#!/usr/bin/env php
<?php

/**
 * Rss.az application initialization tool
 * @author Vagif Rufullazada <vagif@rufullazada.me>
 */

$arguments = getArguments();
$root = __DIR__;
$configuration = json_decode(file_get_contents("{$root}/environments/config.json"), true);
$environments = $configuration['environments'];
$envNames = array_keys($environments);

echo 'Rss.az application initialization: ' . PHP_EOL;

$envName = null;
echo 'Okay buddy, which environment do you want me initialize to? ' . PHP_EOL;
foreach ($envNames as $i => $name) echo "  [$i] $name " . PHP_EOL;
echo "\n  Choose [0-" . (count($environments) - 1) . ', or "q" to quit] ';
$choice = (int) trim(fgets(STDIN));

if (!isset($envNames[$choice])) {
    printError("Canceling initialization. Invalid environment: {$choice}");
    exit(0);
}

$envName = strtolower($envNames[$choice]);
$envPath = $environments[$envName]['path'];
$rootPath = "$root/environments/{$envPath}";
if (!is_dir($rootPath)) {
    printError("$rootPath directory does not exist. Check path in $envName environment.");
    exit(3);
}

echo "\n  Starting initialization ...\n\n";

$files = getFileList($rootPath);
if (isset($configuration['skipFiles'])) {
    $skipFiles = $configuration['skipFiles'];
    array_walk($skipFiles, function (&$value) use ($configuration, $root) {
        $value = "$root/$value";
    });
    $files = array_diff($files, array_intersect_key($configuration['skipFiles'], array_filter($skipFiles, 'file_exists')));
}
$all = false;
foreach ($files as $file)
    if (!copyFile($root, "environments/{$envPath}/{$file}", $file, $all, $arguments))
        break;

// post callbacks.
foreach ($configuration['callbacks'] as $callback) {
    if (!function_exists($callback['method'])) continue;

    $callback['method']($root, $callback['files']);
}

echo "\n Initialization completed successfully! \n\n";

function getFileList(string $root, string $basePath = ''): array
{
    $files = [];
    $handle = opendir($root);
    while (($path = readdir($handle)) !== false) {
        if ($path === '.git' || $path === '.svn' || $path === '.' || $path === '..') {
            continue;
        }
        $fullPath = "$root/$path";
        $relativePath = $basePath === '' ? $path : "$basePath/$path";
        if (is_dir($fullPath)) {
            $files = array_merge($files, getFileList($fullPath, $relativePath));
        } else {
            $files[] = $relativePath;
        }
    }
    closedir($handle);
    return $files;
}

function copyFile($root, $source, $target, &$all, $params)
{
    if (!is_file($root . '/' . $source)) {
        echo "       skip $target ($source not exist)\n";
        return true;
    }
    if (is_file($root . '/' . $target)) {
        if (file_get_contents($root . '/' . $source) === file_get_contents($root . '/' . $target)) {
            echo "  unchanged $target\n";
            return true;
        }
        if ($all) {
            echo "  overwrite $target\n";
        } else {
            echo "      exist $target\n";
            echo "            ...overwrite? [Yes|No|All|Quit] ";


            $answer = !empty($params['overwrite']) ? $params['overwrite'] : trim(fgets(STDIN));
            if (!strncasecmp($answer, 'q', 1)) {
                return false;
            } else {
                if (!strncasecmp($answer, 'y', 1)) {
                    echo "  overwrite $target\n";
                } else {
                    if (!strncasecmp($answer, 'a', 1)) {
                        echo "  overwrite $target\n";
                        $all = true;
                    } else {
                        echo "       skip $target\n";
                        return true;
                    }
                }
            }
        }
        file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));
        return true;
    }
    echo "   generating $target\n";
    @mkdir(dirname($root . '/' . $target), 0775, true);
    file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));
    return true;
}

function getArguments(): array
{
    $params = [];
    if (isset($_SERVER['argv'])) {
        $params = $_SERVER['argv'];
        array_shift($params);
    }

    $arguments = [];
    foreach ($params as $param) {
        if (preg_match('/^--([\w-]*\w)(=(.*))?$/', $param, $matches)) {
            $name = $matches[1];
            $arguments[$name] = isset($matches[3]) ? $matches[3] : true;
        } else {
            $arguments[] = $param;
        }
    }
    return $arguments;
}

function setWritable(string $root, array $paths): void
{
    foreach ($paths as $writable) {
        if (is_dir("$root/$writable")) {
            if (@chmod("$root/$writable", 0775)) {
                echo "      chmod 0775 $writable\n";
            } else {
                printError("Operation chmod not permitted for directory $writable.");
            }
        } else {
            printError("Directory $writable does not exist.");
        }
    }
}

function setExecutable($root, $paths): void
{
    foreach ($paths as $executable) {
        if (file_exists("$root/$executable")) {
            if (@chmod("$root/$executable", 0775)) {
                echo "      chmod 0775 $executable\n";
            } else {
                printError("Operation chmod not permitted for $executable.");
            }
        } else {
            printError("$executable does not exist.");
        }
    }
}

/**
 * @param $root
 * @param $paths
 * @throws Exception
 */
function setCookieValidationKey(string $root, array $paths): void
{
    foreach ($paths as $file) {
        echo " Generating cookie validation key in $file\n";
        $file = $root . '/' . $file;
        $length = 32;
        $bytes = random_bytes($length);
        $key = strtr(substr(base64_encode($bytes), 0, $length), '+/=', '_-.');
        $content = preg_replace('/(("|\')cookieValidationKey("|\')\s*=>\s*)(""|\'\')/', "\\1'$key'", file_get_contents($file));
        file_put_contents($file, $content);
    }
}

function createSymlink(string $root, array $links): void
{
    foreach ($links as $link => $target) {
        //first removing folders to avoid errors if the folder already exists
        @rmdir($root . "/" . $link);
        //next removing existing symlink in order to update the target
        if (is_link($root . "/" . $link)) {
            @unlink($root . "/" . $link);
        }
        if (@symlink($root . "/" . $target, $root . "/" . $link)) {
            echo "      symlink $root/$target $root/$link\n";
        } else {
            printError("Cannot create symlink $root/$target $root/$link.");
        }
    }
}

/**
 * Prints error message.
 * @param string $message message
 */
function printError($message)
{
    echo "\n  " . formatMessage("Error. $message", ['fg-red']) . " \n";
}

/**
 * Returns true if the stream supports colorization. ANSI colors are disabled if not supported by the stream.
 *
 * - windows without ansicon
 * - not tty consoles
 *
 * @return boolean true if the stream supports ANSI colors, otherwise false.
 */
function ansiColorsSupported()
{
    return DIRECTORY_SEPARATOR === '\\'
        ? getenv('ANSICON') !== false || getenv('ConEmuANSI') === 'ON'
        : function_exists('posix_isatty') && @posix_isatty(STDOUT);
}

/**
 * Get ANSI code of style.
 * @param string $name style name
 * @return integer ANSI code of style.
 */
function getStyleCode($name)
{
    $styles = [
        'bold' => 1,
        'fg-black' => 30,
        'fg-red' => 31,
        'fg-green' => 32,
        'fg-yellow' => 33,
        'fg-blue' => 34,
        'fg-magenta' => 35,
        'fg-cyan' => 36,
        'fg-white' => 37,
        'bg-black' => 40,
        'bg-red' => 41,
        'bg-green' => 42,
        'bg-yellow' => 43,
        'bg-blue' => 44,
        'bg-magenta' => 45,
        'bg-cyan' => 46,
        'bg-white' => 47,
    ];
    return $styles[$name];
}

/**
 * Formats message using styles if STDOUT supports it.
 * @param string $message message
 * @param string[] $styles styles
 * @return string formatted message.
 */
function formatMessage($message, $styles)
{
    if (empty($styles) || !ansiColorsSupported()) {
        return $message;
    }

    return sprintf("\x1b[%sm", implode(';', array_map('getStyleCode', $styles))) . $message . "\x1b[0m";
}
